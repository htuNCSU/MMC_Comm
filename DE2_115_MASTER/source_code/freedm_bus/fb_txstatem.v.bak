//////////////////////////////////////////////////////////////////////
////                                                              ////
////  eth_txstatem.v                                              ////
////                                                              ////
////  This file is part of the Ethernet IP core project           ////
////  http://www.opencores.org/project,ethmac                     ////
////                                                              ////
////  Author(s):                                                  ////
////      - Igor Mohor (igorM@opencores.org)                      ////
////      - Novan Hartadi (novan@vlsi.itb.ac.id)                  ////
////      - Mahmud Galela (mgalela@vlsi.itb.ac.id)                ////
////                                                              ////
////  All additional information is avaliable in the Readme.txt   ////
////  file.                                                       ////
////                                                              ////
//////////////////////////////////////////////////////////////////////
////                                                              ////
//// Copyright (C) 2001 Authors                                   ////
////                                                              ////
//// This source file may be used and distributed without         ////
//// restriction provided that this copyright statement is not    ////
//// removed from the file and that any derivative work contains  ////
//// the original copyright notice and the associated disclaimer. ////
////                                                              ////
//// This source file is free software; you can redistribute it   ////
//// and/or modify it under the terms of the GNU Lesser General   ////
//// Public License as published by the Free Software Foundation; ////
//// either version 2.1 of the License, or (at your option) any   ////
//// later version.                                               ////
////                                                              ////
//// This source is distributed in the hope that it will be       ////
//// useful, but WITHOUT ANY WARRANTY; without even the implied   ////
//// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      ////
//// PURPOSE.  See the GNU Lesser General Public License for more ////
//// details.                                                     ////
////                                                              ////
//// You should have received a copy of the GNU Lesser General    ////
//// Public License along with this source; if not, download it   ////
//// from http://www.opencores.org/lgpl.shtml                     ////
////                                                              ////
//////////////////////////////////////////////////////////////////////
//
// CVS Revision History
//
// $Log: not supported by cvs2svn $
// Revision 1.5  2002/10/30 12:54:50  mohor
// State machine goes from idle to the defer state when CarrierSense is 1. FCS (CRC appending) fixed to check the CrcEn bit also when padding is necessery.
//
// Revision 1.4  2002/01/23 10:28:16  mohor
// Link in the header changed.
//
// Revision 1.3  2001/10/19 08:43:51  mohor
// eth_timescale.v changed to timescale.v This is done because of the
// simulation of the few cores in a one joined project.
//
// Revision 1.2  2001/09/11 14:17:00  mohor
// Few little NCSIM warnings fixed.
//
// Revision 1.1  2001/08/06 14:44:29  mohor
// A define FPGA added to select between Artisan RAM (for ASIC) and Block Ram (For Virtex).
// Include files fixed to contain no path.
// File names and module names changed ta have a eth_ prologue in the name.
// File eth_timescale.v is used to define timescale
// All pin names on the top module are changed to contain _I, _O or _OE at the end.
// Bidirectional signal MDIO is changed to three signals (Mdc_O, Mdi_I, Mdo_O
// and Mdo_OE. The bidirectional signal must be created on the top level. This
// is done due to the ASIC tools.
//
// Revision 1.1  2001/07/30 21:23:42  mohor
// Directory structure changed. Files checked and joind together.
//
// Revision 1.3  2001/06/19 18:16:40  mohor
// TxClk changed to MTxClk (as discribed in the documentation).
// Crc changed so only one file can be used instead of two.
//
// Revision 1.2  2001/06/19 10:38:07  mohor
// Minor changes in header.
//
// Revision 1.1  2001/06/19 10:27:57  mohor
// TxEthMAC initial release.
//
//
//
//


`include "timescale.v"


module eth_txstatem  (MTxClk, Reset, NibCnt, 
					  TxStartFrm, SlaveEndFrm, TxEndFrm, 
					  TxUnderRun, UnderRun, StartTxDone, 
                      StateIdle, StateSoC, StateData, StateCRC, 
                      StartIdle, StartSoC, StartData, StartCRC
                     );

input MTxClk;
input Reset;

input [6:0] NibCnt;

input TxStartFrm;
input SlaveEndFrm;
input TxEndFrm;

input TxUnderRun;
input UnderRun;
input StartTxDone; 


output StateIdle;         // Idle state
output StateSoC;     // Preamble state
output [1:0] StateData;   // Data state
output StateCRC;          // PAD state

output StartIdle;          // FCS state will be activated in next clock
output StartSoC;     // Preamble state will be activated in next clock
output [1:0] StartData;   // Data state will be activated in next clock
output StartCRC;          // IPG state will be activated in next clock

reg StateIdle;
reg StateSoC;
reg [1:0] StateData;
reg StateCRC;


// Defining the next state

assign StartIdle = StartTxDone;

assign StartSoC = StateIdle & TxStartFrm;

assign StartData[0] = ( StateSoC & DataSOC ) | ( StateData[1] & ~SlaveEndFrm ) | ( StateCRC & ~TxEndFrm);

assign StartData[1] =  StateData[0] & ~TxUnderRun ;

assign StartCRC =  StateData[1] & SlaveEndFrm ;


// Tx State Machine
always @ (posedge MTxClk or posedge Reset)
begin
  if(Reset)
    begin
      StateIdle       <=  1'b0;
      StateSoC        <=  1'b0;
      StateData[1:0]  <=  2'b0;
      StateCRC        <=  1'b0;
    end
  else
    begin
      StateData[1:0] <=  StartData[1:0];
	  
      if(StartSoC)
        StateIdle <=  1'b0;
      else
      if(StartIdle)
        StateIdle <=  1'b1;

      if(StartData[0])
        StateSoC <=  1'b0;
      else
      if(StartSoC)
        StateSoC <=  1'b1;

      if(StartData[0] | StartIdle)
        StateCRC <=  1'b0;
      else
      if(StartCRC)
        StateCRC <=  1'b1;

    end
end

endmodule
